import
    std/[asyncdispatch, os, strutils, db_sqlite, json, sequtils, strformat, uri],
    jester

let db = open(getCurrentDir() / ".." / "scraper" / "malware.db", "", "", "")

type
    Malwares* = object
        videoId*: string
        channel*: string
        malware_links*: seq[string]
        discord_links*: seq[string]

proc templ(file, str: string): string =
    var 
        content = readFile(file)
        header = readFile(getCurrentDir() / "public" / "templates" / "header.html")

    return content
        .replace("$(HEADER)", header)
        .replace("$(CONTENT)", str)

proc getMalwares: seq[Malwares] =
    var resultdb = db.getAllRows(sql"SELECT * FROM malwares")
    for res in resultdb:
        var
            ml: seq[string] = @[]
            dl: seq[string] = @[]
        for i in (res[2].parseJson).getElems(): 
            ml.add(i.getStr())
        for i in (res[3].parseJson).getElems(): 
            dl.add(i.getStr())
        result.add(Malwares(
            videoId: res[0],
            channel: res[1],
            malware_links: deduplicate(ml),
            discord_links: deduplicate(dl)
        ))

router web:
    get "/":
        var html: string = ""
        for malwares in getMalwares():
            var dl: string = ""
            for links in malwares.discord_links:
                var lk = if links.contains("http"): links else: "https://" & links
                dl.add(fmt"""<a href="{lk}">{parseUri(lk).hostname}</a><br/>""")
            var ml: string = ""
            for links in malwares.malware_links:
                var lk = if links.contains("http"): links else: "https://" & links
                ml.add(fmt"""<a href="{lk}">[{parseUri(lk).hostname}] {parseUri(lk).path}</a><br/>""") # xss moment
            html.add(fmt"""<tr>
                <td><a href="https://youtube.com/watch?v={malwares.videoId}">{malwares.videoId}</a></td>
                <td><a href="{malwares.channel}">{malwares.channel.split("/")[malwares.channel.split("/").high]}</a></td>
                <td>{dl}</td>
                <td>{ml}</td>
            </tr>""")
        resp templ((getCurrentDir() / "public" / "html" / "index.html"), html)

proc main() =
    let port = Port(6969)
    let settings = newSettings(port=port)
    var jester = initJester(web, settings=settings)
    jester.serve()

when isMainModule:
    main()